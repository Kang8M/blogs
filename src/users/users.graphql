type Query {
  users: [User]
  user(query: FindOneUserInput): User
}

type Mutation {
  createUser(input: CreateUserInput): User

#  findOneUser(query: FindOneUserInput): User

#  updateUserRole(id: Int, isAdmin: Boolean): User
#
#  updateUserPassword(id: Int, password: String): User
}

type User {
  name: String
  username: String
  password: String
  email: String
  isAdmin: Boolean
}

input CreateUserInput {
  name: String
  username: String
  password: String
  email: String
  isAdmin: Boolean
}

input FindOneUserInput {
  name: String
  username: String
  password: String
  email: String
  isAdmin: Boolean
}

#input FilterQueryWhere {
#  field: String,
#  condition: String,
#  value: String
#}

#input FilterQueryConditionInput {
#  eq: Float
#  gt: Float
#  gte: Float
#  lt: Float
#  lte: Float
#  between: [Float]
#}

#input UpdateUserRoleInput {
#  id: Int
#  isAdmin: Boolean
#}
#
#input UpdateUserPasswordInput {
#  id: Int
#  password: String
#}